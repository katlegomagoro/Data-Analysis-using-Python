# -*- coding: utf-8 -*-
"""NewsScrappingAndTransilitionAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gf9xuMxBkqNdRioNAm0eI7iw4HdgHgdk
"""

!pip install pygooglenews

#all the imports needed to run your code
from pygooglenews import GoogleNews
import pandas as pd
import numpy as np
import datetime
import matplotlib.pyplot as plt

#create the Google News API to search using germerny langage and location germany
gn = GoogleNews(lang='de',country="DE")

#inntilizing the search to collect the Data Searching Loadshedding in Southe Africa in Germaney launge
search = gn.search('S端dafrika Loadshedding und Energiekrise')
print(search)

#we want the Data to be more entries
for i in search['entries']:
  print(i)

# here we wanna see the Data sorted in Titled actual titles 
articles = search['entries']
for i in articles:
  print(i.title)

def get_titles(search):
  gn=GoogleNews(lang='de',country='DE')
  search = gn.search(search)
  articles = search['entries']
  for i in articles:
   print(i.title)
  return 
#here you can Enter the serch titlr in
get_titles('S端dafrika Loadshedding und Energiekrise')

#the Filtering Function to get `keyword of the News using dictinaries
def get_titles(keyword):
  news= []
  gn=GoogleNews(lang='de',country='DE')
  search = gn.search(keyword)
  articles = search['entries']
  for i in articles:
   article= {'title': i.title, 'link': i.link,"published":i.published}
   news.append(article)
  return news
#here you can Enter the serch in germany and print the Data
data = get_titles("S端dafrika Loadshedding und Wirtschaft")
data

#so here we Save all the data in data frame to  can start translating and analyzing it
df = pd.DataFrame(data)
df.head()

# here is texblob our natural lanaguage processing library to make sentiments
from textblob import TextBlob

# here we feed the function the term that we are interested in germeney
blob = TextBlob('S端dafrika Loadshedding und Wirtschaft')

# here we use translate to with a Germern from language to Englishlanguage
blob.translate(from_lang='de', to='en')

# let's create a function that bring back sentiment and translateions
def translation(text):
  blob =TextBlob(text)
  return str(blob.translate(from_lang='de', to='en'))
  
def sentiment(text):
  blob=TextBlob(text)
  return blob.sentiment.polarity

df['translation'] = df['title'].apply(translation)
df['sentiment'] =df['translation'].apply(sentiment)

#Call the Dataframe to see the results after sentiments
df

#here we anayse the Sentiments and intilize them on how they mean
import numpy as np

df['Sentiment Class']  = np.where(df['sentiment']<0,"negative",
                                  np.where(df['sentiment']>0,"positive",
                                           "neutral"))
df

#funtion on how to display the results of the sentiments
df['Sentiment Class'].value_counts(normalize=True)

#Sorting the Data by the date of when it was published
df['Date'] = pd.to_datetime(df['published'])
df['Date'] =df['Date'].dt.date

#sorting Date in decending order and printing the data frame
df = df.sort_values(by='Date', ascending=False)
df

import pandas as pd
import matplotlib.pyplot as plt

df['Sentiment Class'].value_counts(normalize=True).plot(kind='bar')
plt.title('South Africa Loadshedding Reviews in Germeny News Articles')

plt.show()

import pandas as pd

df['Sentiment Class'].value_counts(normalize=True).plot(kind='pie', title='South Africa Loadshedding reviews')
plt.show()

df['Sentiment Class'].value_counts(normalize=True).plot(kind='pie', title='South Africa Loadshedding reviews', legend=True, fontsize=12, autopct='%1.1f%%', figsize=(6, 6), startangle=90, shadow=True, labels=df['Sentiment Class'].value_counts().index)

plt.ylabel('')

plt.show()

git remote add origin https://github.com/katlegomagoro/Data-Analysis-using-Python.git
git branch -M main
git push -u origin main